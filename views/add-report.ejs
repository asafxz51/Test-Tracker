<% layout('layouts/boilerplate') %>

<style>
    .step-input-group {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .step-number {
        margin-right: 10px;
        font-weight: bold;
    }

    .step-input-group input {
        flex-grow: 1;
        /* Make input take up available space */
    }

    .remove-step-btn {
        margin-left: 10px;
    }
</style>

 <div class="form-container">
  <h1>Add New Test Case</h1>
  <form action="/add" method="POST">
   <label for="title" style="margin-bottom: 3px;"><b>Title:</b></label>
   <input type="text" name="title" placeholder="Title" required maxlength="17">
   <label for="preconditions" style="margin-bottom: 3px;"><b>Preconditions:</b></label>
   <input type="text" name="preconditions" placeholder="Preconditions" required>
    <label for="expected" style="margin-bottom: 3px;"><b>Expected Result:</b></label>
   <input type="text" name="expected" placeholder="Expected Result" required>
       <label for="actual" style="margin-bottom: 3px;"><b>Actual Result:</b></label>
       <input type="text" name="actual" placeholder="Actual Result" required>
    <div class="form-group">
        <label for="steps">Test Steps</label>
        <!-- Container where dynamic step inputs will be added -->
        <div id="steps-container">
            <!-- Add one step by default -->
            <div class="step-input-group">
                <span class="step-number">1.</span>
                <input type="text" name="steps" placeholder="Enter a test step" required>
                <button type="button" class="button button-danger remove-step-btn">Remove</button>
            </div>
        </div>
        <button type="button" id="add-step-btn" class="button">Add Step</button>
    </div>
       <label for="description" style="margin-bottom: 3px;"><b>Description:</b></label>
   <textarea name="description" placeholder="Describe the test details..." required></textarea>
   <label for="type" style="margin-bottom: 3px;"><b>Test Type:</b></label>
   <select name="type">
    <option value="Functional">Functional</option>
    <option value="Regression">Regression</option>
    <option value="Smoke">Smoke</option>
    <option value="UI">UI</option>
    <option value="API">API</option>
   </select>
   <label for="status" style="margin-bottom: 3px;"><b>Test Status:</b></label>
   <select name="status">
    <option value="Not Executed">Not Executed</option>
    <option value="In Progress">In Progress</option>
    <option value="Passed">Passed</option>
    <option value="Failed">Failed</option>
    <option value="Blocked">Blocked</option>
    <option value="Skipped">Skipped</option>
    <option value="Retest">Retest</option>
   </select>
    <label for="priority" style="margin-bottom: 3px;"><b>Priority:</b></label>
   <select name="priority">
    <option value="Low">Low</option>
    <option value="Medium">Medium</option>
    <option value="High">High</option>
   </select>
   <button type="submit">Add Report</button>
  </form>
  <div class="actions">
   <a href="/">Cancel</a>
  </div>
 </div>


<script>
    // SCRIPT FOR DYNAMIC STEPS - you will reuse this
    document.addEventListener('DOMContentLoaded', function () {
        const stepsContainer = document.getElementById('steps-container');
        const addStepBtn = document.getElementById('add-step-btn');

        // Function to re-number all steps
        function renumberSteps() {
            const stepGroups = stepsContainer.querySelectorAll('.step-input-group');
            stepGroups.forEach((group, index) => {
                group.querySelector('.step-number').textContent = `${index + 1}.`;
            });
        }

        // Event listener for the "Add Step" button
        addStepBtn.addEventListener('click', () => {
            const newStepGroup = document.createElement('div');
            newStepGroup.classList.add('step-input-group');
            newStepGroup.innerHTML = `
                <span class="step-number"></span>
                <input type="text" name="steps" placeholder="Enter a test step" required>
                <button type="button" class="button button-danger remove-step-btn">Remove</button>
            `;
            stepsContainer.appendChild(newStepGroup);
            renumberSteps();
        });

        // Event listener for "Remove" buttons (using event delegation)
        stepsContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-step-btn')) {
                // Prevent removing the very last step
                if (stepsContainer.children.length > 1) {
                    e.target.parentElement.remove();
                    renumberSteps();
                } else {
                    alert('You must have at least one step.');
                }
            }
        });

        // Initial numbering
        renumberSteps();
    });
</script>
